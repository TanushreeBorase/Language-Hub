// Given a reference (pointer to pointer)
// to the head of a list and an int,
// inserts a new node on the front of
// the list.
void push(Node** head_ref, int new_data)
{

	// 1. allocate node
	Node* new_node = new Node();

	// 2. put in the data
	new_node->data = new_data;

	// 3. Make next of new node as head
	new_node->next = (*head_ref);

	// 4. Move the head to point to
	// the new node
	(*head_ref) = new_node;
}


// Given a node prev_node, insert a
// new node after the given
// prev_node
void insertAfter(Node* prev_node, int new_data)
{
	// 1. Check if the given prev_node is NULL
	if (prev_node == NULL) {
		cout << "The given previous node cannot be NULL";
		return;
	}

	// 2. Allocate new node
	Node* new_node = new Node();

	// 3. Put in the data
	new_node->data = new_data;

	// 4. Make next of new node as
	// next of prev_node
	new_node->next = prev_node->next;

	// 5. move the next of prev_node
	// as new_node
	prev_node->next = new_node;
}


// Given a reference (pointer to pointer) to the head
// of a list and an int, appends a new node at the end
void append(Node** head_ref, int new_data)
{
	// 1. allocate node
	Node* new_node = new Node();

	// Used in step 5
	Node* last = *head_ref;

	// 2. Put in the data
	new_node->data = new_data;

	// 3. This new node is going to be
	// the last node, so make next of
	// it as NULL
	new_node->next = NULL;

	// 4. If the Linked List is empty,
	// then make the new node as head
	if (*head_ref == NULL) {
		*head_ref = new_node;
		return;
	}

	// 5. Else traverse till the last node
	while (last->next != NULL) {
		last = last->next;
	}

	// 6. Change the next of last node
	last->next = new_node;
	return;
}




#include <bits/stdc++.h>
using namespace std;

struct Node {
	int number;
	Node* next;
};

void Push(Node** head, int A)
{
	Node* n = (Node*)malloc(sizeof(Node));
	n->number = A;
	n->next = *head;
	*head = n;
}

void deleteN(Node** head, int position)
{
	Node* temp;
	Node* prev;
	temp = *head;
	prev = *head;
	for (int i = 0; i < position; i++) {
		if (i == 0 && position == 1) {
			*head = (*head)->next;
			free(temp);
		}
		else {
			if (i == position - 1 && temp) {
				prev->next = temp->next;
				free(temp);
			}
			else {
				prev = temp;

				// Position was greater than
				// number of nodes in the list
				if (prev == NULL)
					break;
				temp = temp->next;
			}
		}
	}
}

void printList(Node* head)
{
	while (head) {
		if (head->next == NULL)
			cout << "[" << head->number << "] "
				<< "[" << head << "]->"
				<< "(nil)" << endl;
		else
			cout << "[" << head->number << "] "
				<< "[" << head << "]->" << head->next
				<< endl;
		head = head->next;
	}
	cout << endl << endl;
}

// Driver code
int main()
{
	Node* list = (Node*)malloc(sizeof(Node));
	list->next = NULL;
	Push(&list, 1);
	Push(&list, 2);
	Push(&list, 3);

	printList(list);

	// Delete any position from list
	deleteN(&list, 1);
	printList(list);
	return 0;
}
